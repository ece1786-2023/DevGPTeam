{
    "refine_requirements": "\n# Asteroid Dodger - Endless Space Navigation Game\n```\n1. Start with the player's spaceship at the bottom center of the screen, facing an incoming asteroid field from the top.\n2. Implement keyboard controls using W, A, S, and D for moving the spaceship in all four directions.\n3. Create an endless gameplay mode where asteroids increase in speed over time to raise difficulty.\n4. Introduce a shield power-up that grants temporary invincibility and allows the spaceship to survive one asteroid collision.\n5. Develop a scoring system that awards points based on survival time and asteroids dodged, with additional points for collecting shield power-ups.\n6. Ensure asteroids vary in size and speed to provide a challenging and engaging experience.\n7. Define the game's end condition as the spaceship being destroyed by an asteroid collision when not shielded, followed by a display of the final score and a restart option.\n8. Record the player's high score to track progression and encourage replayability.\n```\n",
    "developed_code": "<PROJECT_NAME_START>AsteroidDodger<PROJECT_NAME_END>\n\n<FILE_START>\nmain.py\n```python\nimport pygame\nimport random\nimport time\n\n# Initialize Pygame\npygame.init()\n\n# Constants\nSCREEN_WIDTH = 800\nSCREEN_HEIGHT = 600\nPLAYER_SIZE = 50\nASTEROID_SIZE = 50\nSHIELD_POWERUP_SIZE = 30\nPLAYER_COLOR = (0, 255, 0)\nASTEROID_COLOR = (255, 0, 0)\nSHIELD_POWERUP_COLOR = (0, 0, 255)\nBACKGROUND_COLOR = (0, 0, 0)\nFPS = 60\n\n# Set up the display\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption('Asteroid Dodger')\n\n# Player class\nclass Player:\n    def __init__(self):\n        self.x = SCREEN_WIDTH // 2\n        self.y = SCREEN_HEIGHT - PLAYER_SIZE\n        self.width = PLAYER_SIZE\n        self.height = PLAYER_SIZE\n        self.color = PLAYER_COLOR\n        self.shield = False\n\n    def draw(self):\n        pygame.draw.rect(screen, self.color, (self.x, self.y, self.width, self.height))\n\n    def move(self, dx, dy):\n        self.x += dx\n        self.y += dy\n        # Boundary check\n        self.x = max(self.x, 0)\n        self.x = min(self.x, SCREEN_WIDTH - self.width)\n        self.y = max(self.y, 0)\n        self.y = min(self.y, SCREEN_HEIGHT - self.height)\n\n# Asteroid class\nclass Asteroid:\n    def __init__(self):\n        self.x = random.randint(0, SCREEN_WIDTH - ASTEROID_SIZE)\n        self.y = 0\n        self.width = ASTEROID_SIZE\n        self.height = ASTEROID_SIZE\n        self.color = ASTEROID_COLOR\n        self.speed = random.randint(1, 3)\n\n    def draw(self):\n        pygame.draw.rect(screen, self.color, (self.x, self.y, self.width, self.height))\n\n    def move(self):\n        self.y += self.speed\n\n# ShieldPowerUp class\nclass ShieldPowerUp:\n    def __init__(self):\n        self.x = random.randint(0, SCREEN_WIDTH - SHIELD_POWERUP_SIZE)\n        self.y = 0\n        self.width = SHIELD_POWERUP_SIZE\n        self.height = SHIELD_POWERUP_SIZE\n        self.color = SHIELD_POWERUP_COLOR\n\n    def draw(self):\n        pygame.draw.rect(screen, self.color, (self.x, self.y, self.width, self.height))\n\n    def move(self):\n        self.y += 2\n\n# Game class\nclass Game:\n    def __init__(self):\n        self.player = Player()\n        self.asteroids = []\n        self.shield_powerups = []\n        self.score = 0\n        self.high_score = 0\n        self.start_time = time.time()\n\n    def run(self):\n        clock = pygame.time.Clock()\n        running = True\n        while running:\n            screen.fill(BACKGROUND_COLOR)\n            for event in pygame.event.get():\n                if event.type == pygame.QUIT:\n                    running = False\n\n            keys = pygame.key.get_pressed()\n            if keys[pygame.K_w]:\n                self.player.move(0, -5)\n            if keys[pygame.K_s]:\n                self.player.move(0, 5)\n            if keys[pygame.K_a]:\n                self.player.move(-5, 0)\n            if keys[pygame.K_d]:\n                self.player.move(5, 0)\n\n            # Spawn asteroids\n            if random.randint(1, 30) == 1:\n                self.asteroids.append(Asteroid())\n\n            # Spawn shield power-ups\n            if random.randint(1, 200) == 1:\n                self.shield_powerups.append(ShieldPowerUp())\n\n            # Move and draw asteroids\n            for asteroid in self.asteroids[:]:\n                asteroid.move()\n                asteroid.draw()\n                if asteroid.y > SCREEN_HEIGHT:\n                    self.asteroids.remove(asteroid)\n                    self.score += 1\n\n            # Move and draw shield power-ups\n            for powerup in self.shield_powerups[:]:\n                powerup.move()\n                powerup.draw()\n                if powerup.y > SCREEN_HEIGHT:\n                    self.shield_powerups.remove(powerup)\n\n            # Check for collisions\n            player_rect = pygame.Rect(self.player.x, self.player.y, self.player.width, self.player.height)\n            for asteroid in self.asteroids:\n                asteroid_rect = pygame.Rect(asteroid.x, asteroid.y, asteroid.width, asteroid.height)\n                if player_rect.colliderect(asteroid_rect):\n                    if self.player.shield:\n                        self.player.shield = False\n                        self.asteroids.remove(asteroid)\n                    else:\n                        running = False\n\n            for powerup in self.shield_powerups:\n                powerup_rect = pygame.Rect(powerup.x, powerup.y, powerup.width, powerup.height)\n                if player_rect.colliderect(powerup_rect):\n                    self.player.shield = True\n                    self.shield_powerups.remove(powerup)\n                    self.score += 5\n\n            # Draw player\n            self.player.draw()\n\n            # Update the display\n            pygame.display.flip()\n\n            # Cap the frame rate\n            clock.tick(FPS)\n\n            # Update score based on survival time\n            self.score += (time.time() - self.start_time) // 1\n            self.start_time = time.time()\n\n            # Update high score\n            if self.score > self.high_score:\n                self.high_score = self.score\n\n            # Display score\n            self.display_score()\n\n        # Game over\n        self.display_final_score()\n        pygame.quit()\n\n    def display_score(self):\n        font = pygame.font.SysFont(None, 36)\n        score_text = font.render(f'Score: {int(self.score)}', True, (255, 255, 255))\n        screen.blit(score_text, (10, 10))\n\n    def display_final_score(self):\n        font = pygame.font.SysFont(None, 48)\n        final_score_text = font.render(f'Final Score: {int(self.score)}', True, (255, 255, 255))\n        high_score_text = font.render(f'High Score: {int(self.high_score)}', True, (255, 255, 255))\n        screen.blit(final_score_text, (SCREEN_WIDTH // 2 - final_score_text.get_width() // 2, SCREEN_HEIGHT // 2 - final_score_text.get_height() // 2))\n        screen.blit(high_score_text, (SCREEN_WIDTH // 2 - high_score_text.get_width() // 2, SCREEN_HEIGHT // 2 + high_score_text.get_height()))\n\n# Main function\ndef main():\n    game = Game()\n    game.run()\n\nif __name__ == '__main__':\n    main()\n```\n<FILE_END>",
    "finalized_code": "<PROJECT_NAME_START>AsteroidDodger<PROJECT_NAME_END>\n\n<FILE_START>\nmain.py\n```python\nimport pygame\nimport random\nimport time\nimport sys\n\n# Initialize Pygame\npygame.init()\n\n# Constants\nSCREEN_WIDTH = 800\nSCREEN_HEIGHT = 600\nPLAYER_SIZE = 50\nASTEROID_SIZE = 50\nSHIELD_POWERUP_SIZE = 30\nPLAYER_COLOR = (0, 255, 0)\nASTEROID_COLOR = (255, 0, 0)\nSHIELD_POWERUP_COLOR = (0, 0, 255)\nBACKGROUND_COLOR = (0, 0, 0)\nFPS = 60\nFONT_NAME = pygame.font.match_font('arial')\n\n# Set up the display\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption('Asteroid Dodger')\n\n# Player class\nclass Player:\n    def __init__(self):\n        self.x = SCREEN_WIDTH // 2 - PLAYER_SIZE // 2\n        self.y = SCREEN_HEIGHT - PLAYER_SIZE * 2\n        self.width = PLAYER_SIZE\n        self.height = PLAYER_SIZE\n        self.color = PLAYER_COLOR\n        self.shield = False\n\n    def draw(self):\n        pygame.draw.rect(screen, self.color, (self.x, self.y, self.width, self.height))\n\n    def move(self, dx, dy):\n        self.x += dx\n        self.y += dy\n        # Boundary check\n        self.x = max(self.x, 0)\n        self.x = min(self.x, SCREEN_WIDTH - self.width)\n        self.y = max(self.y, 0)\n        self.y = min(self.y, SCREEN_HEIGHT - self.height)\n\n# Asteroid class\nclass Asteroid:\n    def __init__(self):\n        self.x = random.randint(0, SCREEN_WIDTH - ASTEROID_SIZE)\n        self.y = -ASTEROID_SIZE\n        self.width = ASTEROID_SIZE\n        self.height = ASTEROID_SIZE\n        self.color = ASTEROID_COLOR\n        self.speed = random.randint(2, 5)\n\n    def draw(self):\n        pygame.draw.rect(screen, self.color, (self.x, self.y, self.width, self.height))\n\n    def move(self):\n        self.y += self.speed\n\n# ShieldPowerUp class\nclass ShieldPowerUp:\n    def __init__(self):\n        self.x = random.randint(0, SCREEN_WIDTH - SHIELD_POWERUP_SIZE)\n        self.y = -SHIELD_POWERUP_SIZE\n        self.width = SHIELD_POWERUP_SIZE\n        self.height = SHIELD_POWERUP_SIZE\n        self.color = SHIELD_POWERUP_COLOR\n\n    def draw(self):\n        pygame.draw.rect(screen, self.color, (self.x, self.y, self.width, self.height))\n\n    def move(self):\n        self.y += 3\n\n# Game class\nclass Game:\n    def __init__(self):\n        self.player = Player()\n        self.asteroids = []\n        self.shield_powerups = []\n        self.score = 0\n        self.high_score = 0\n        self.start_time = time.time()\n\n    def run(self):\n        clock = pygame.time.Clock()\n        running = True\n        while running:\n            screen.fill(BACKGROUND_COLOR)\n            for event in pygame.event.get():\n                if event.type == pygame.QUIT:\n                    running = False\n\n            keys = pygame.key.get_pressed()\n            if keys[pygame.K_w]:\n                self.player.move(0, -5)\n            if keys[pygame.K_s]:\n                self.player.move(0, 5)\n            if keys[pygame.K_a]:\n                self.player.move(-5, 0)\n            if keys[pygame.K_d]:\n                self.player.move(5, 0)\n\n            # Spawn asteroids\n            if random.randint(1, 20) == 1:\n                self.asteroids.append(Asteroid())\n\n            # Spawn shield power-ups\n            if random.randint(1, 100) == 1:\n                self.shield_powerups.append(ShieldPowerUp())\n\n            # Move and draw asteroids\n            for asteroid in self.asteroids[:]:\n                asteroid.move()\n                asteroid.draw()\n                if asteroid.y > SCREEN_HEIGHT:\n                    self.asteroids.remove(asteroid)\n                    self.score += 1\n\n            # Move and draw shield power-ups\n            for powerup in self.shield_powerups[:]:\n                powerup.move()\n                powerup.draw()\n                if powerup.y > SCREEN_HEIGHT:\n                    self.shield_powerups.remove(powerup)\n\n            # Check for collisions\n            player_rect = pygame.Rect(self.player.x, self.player.y, self.player.width, self.player.height)\n            for asteroid in self.asteroids[:]:\n                asteroid_rect = pygame.Rect(asteroid.x, asteroid.y, asteroid.width, asteroid.height)\n                if player_rect.colliderect(asteroid_rect):\n                    if self.player.shield:\n                        self.player.shield = False\n                        self.asteroids.remove(asteroid)\n                    else:\n                        running = False\n                        self.display_final_score()\n                        pygame.display.flip()\n                        pygame.time.wait(3000)\n                        self.reset_game()\n\n            for powerup in self.shield_powerups[:]:\n                powerup_rect = pygame.Rect(powerup.x, powerup.y, powerup.width, powerup.height)\n                if player_rect.colliderect(powerup_rect):\n                    self.player.shield = True\n                    self.shield_powerups.remove(powerup)\n                    self.score += 5\n\n            # Draw player\n            self.player.draw()\n\n            # Update the display\n            pygame.display.flip()\n\n            # Cap the frame rate\n            clock.tick(FPS)\n\n            # Update score based on survival time\n            self.score += (time.time() - self.start_time) // 1\n            self.start_time = time.time()\n\n            # Update high score\n            if self.score > self.high_score:\n                self.high_score = self.score\n\n            # Display score\n            self.display_score()\n\n        pygame.quit()\n\n    def display_score(self):\n        font = pygame.font.Font(FONT_NAME, 36)\n        score_text = font.render(f'Score: {int(self.score)}', True, (255, 255, 255))\n        screen.blit(score_text, (10, 10))\n\n    def display_final_score(self):\n        font = pygame.font.Font(FONT_NAME, 48)\n        final_score_text = font.render(f'Final Score: {int(self.score)}', True, (255, 255, 255))\n        high_score_text = font.render(f'High Score: {int(self.high_score)}', True, (255, 255, 255))\n        screen.blit(final_score_text, (SCREEN_WIDTH // 2 - final_score_text.get_width() // 2, SCREEN_HEIGHT // 2 - final_score_text.get_height() // 2))\n        screen.blit(high_score_text, (SCREEN_WIDTH // 2 - high_score_text.get_width() // 2, SCREEN_HEIGHT // 2 + high_score_text.get_height()))\n\n    def reset_game(self):\n        self.player = Player()\n        self.asteroids = []\n        self.shield_powerups = []\n        self.score = 0\n        self.start_time = time.time()\n        self.run()\n\n# Main function\ndef main():\n    game = Game()\n    game.run()\n\nif __name__ == '__main__':\n    main()\n```\n<FILE_END>"
}