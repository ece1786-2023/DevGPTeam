{
  "refine_requirements": "\n# Flappy Bird-style Endless Runner Game\n```\n1. Implement a main menu with \"Start Game\" functionality and high score display.\n2. Create an endless gameplay loop where the difficulty (bird's speed) increases by 40% every 5 seconds.\n3. Design obstacles that the player must navigate through to progress.\n4. Develop mouse-click based controls for the bird's flapping and ascending movement.\n5. Establish a scoring system that increments based on the distance the player travels.\n6. Display the bird's current speed on the UI, with real-time updates as the speed increases.\n7. Define game over conditions as either a collision with an obstacle or falling off the screen.\n8. Provide a restart option upon game over that resets the game state and returns to the main menu.\n9. Ensure the speed indicator is clearly visible and updates according to the game's increasing speed mechanic.\n```\n",
  "developed_code": "<PROJECT_NAME_START>FlappyBirdClone<PROJECT_NAME_END>\n\n<FILE_START>\nmain.py\n```python\nimport pygame\nimport sys\nimport random\n\n# Constants\nSCREEN_WIDTH = 400\nSCREEN_HEIGHT = 600\nGRAVITY = 0.25\nBIRD_FLAP_POWER = 5\nOBSTACLE_SPEED = 5\nOBSTACLE_WIDTH = 70\nOBSTACLE_HEIGHT = 500\nOBSTACLE_GAP = 200\nSPEED_INCREASE_INTERVAL = 5000  # in milliseconds\nSPEED_INCREASE_FACTOR = 1.4\n\n# Initialize Pygame\npygame.init()\n\n# Set up the screen\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption('Flappy Bird Clone')\n\n# Load images\nBIRD_IMAGE = pygame.Surface((30, 30))\nBIRD_IMAGE.fill((255, 255, 0))\nOBSTACLE_IMAGE = pygame.Surface((OBSTACLE_WIDTH, OBSTACLE_HEIGHT))\nOBSTACLE_IMAGE.fill((0, 255, 0))\n\n# Game variables\nbird_pos = [50, SCREEN_HEIGHT // 2]\nbird_vel = 0\nobstacles = []\nscore = 0\nhigh_score = 0\nspeed = OBSTACLE_SPEED\nlast_speed_increase = pygame.time.get_ticks()\n\n# Main menu\ndef main_menu():\n    global high_score\n    running = True\n    while running:\n        screen.fill((0, 0, 0))\n        font = pygame.font.SysFont(None, 36)\n        text = font.render('Flappy Bird Clone', True, (255, 255, 255))\n        text_rect = text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 4))\n        screen.blit(text, text_rect)\n\n        start_button = font.render('Start Game', True, (255, 255, 255))\n        start_button_rect = start_button.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))\n        screen.blit(start_button, start_button_rect)\n\n        high_score_text = font.render(f'High Score: {high_score}', True, (255, 255, 255))\n        high_score_rect = high_score_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 + 50))\n        screen.blit(high_score_text, high_score_rect)\n\n        pygame.display.flip()\n\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                pygame.quit()\n                sys.exit()\n            if event.type == pygame.MOUSEBUTTONDOWN:\n                if start_button_rect.collidepoint(event.pos):\n                    running = False\n\n# Game loop\ndef game_loop():\n    global bird_pos, bird_vel, obstacles, score, high_score, speed, last_speed_increase\n    clock = pygame.time.Clock()\n    running = True\n    while running:\n        # Event handling\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                pygame.quit()\n                sys.exit()\n            if event.type == pygame.MOUSEBUTTONDOWN:\n                bird_vel = -BIRD_FLAP_POWER\n\n        # Bird physics\n        bird_vel += GRAVITY\n        bird_pos[1] += bird_vel\n\n        # Move obstacles\n        obstacles = [(obs[0] - speed, obs[1]) for obs in obstacles if obs[0] > -OBSTACLE_WIDTH]\n\n        # Add new obstacle\n        if not obstacles or obstacles[-1][0] < SCREEN_WIDTH - 300:\n            height = random.randint(100, SCREEN_HEIGHT - 100 - OBSTACLE_GAP)\n            obstacles.append((SCREEN_WIDTH, height))\n\n        # Check for collisions\n        bird_rect = pygame.Rect(bird_pos[0], bird_pos[1], BIRD_IMAGE.get_width(), BIRD_IMAGE.get_height())\n        for obs in obstacles:\n            obs_rect_top = pygame.Rect(obs[0], 0, OBSTACLE_WIDTH, obs[1])\n            obs_rect_bottom = pygame.Rect(obs[0], obs[1] + OBSTACLE_GAP, OBSTACLE_WIDTH, SCREEN_HEIGHT)\n            if bird_rect.colliderect(obs_rect_top) or bird_rect.colliderect(obs_rect_bottom):\n                running = False\n            if bird_pos[1] > SCREEN_HEIGHT or bird_pos[1] < 0:\n                running = False\n\n        # Increase speed\n        current_time = pygame.time.get_ticks()\n        if current_time - last_speed_increase > SPEED_INCREASE_INTERVAL:\n            speed *= SPEED_INCREASE_FACTOR\n            last_speed_increase = current_time\n\n        # Update score\n        score += 1\n        high_score = max(high_score, score)\n\n        # Draw everything\n        screen.fill((0, 0, 0))\n        for obs in obstacles:\n            screen.blit(OBSTACLE_IMAGE, (obs[0], 0))\n            screen.blit(OBSTACLE_IMAGE, (obs[0], obs[1] + OBSTACLE_GAP))\n        screen.blit(BIRD_IMAGE, bird_pos)\n\n        # Draw score\n        font = pygame.font.SysFont(None, 36)\n        score_text = font.render(f'Score: {score}', True, (255, 255, 255))\n        screen.blit(score_text, (10, 10))\n\n        # Draw speed\n        speed_text = font.render(f'Speed: {speed:.1f}', True, (255, 255, 255))\n        screen.blit(speed_text, (10, 50))\n\n        pygame.display.flip()\n        clock.tick(30)\n\n    # Game over\n    game_over()\n\n# Game over screen\ndef game_over():\n    global bird_pos, bird_vel, obstacles, score, speed, last_speed_increase\n    running = True\n    while running:\n        screen.fill((0, 0, 0))\n        font = pygame.font.SysFont(None, 36)\n        text = font.render('Game Over', True, (255, 255, 255))\n        text_rect = text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 4))\n        screen.blit(text, text_rect)\n\n        restart_button = font.render('Restart', True, (255, 255, 255))\n        restart_button_rect = restart_button.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))\n        screen.blit(restart_button, restart_button_rect)\n\n        score_text = font.render(f'Score: {score}', True, (255, 255, 255))\n        score_rect = score_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 + 50))\n        screen.blit(score_text, score_rect)\n\n        pygame.display.flip()\n\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                pygame.quit()\n                sys.exit()\n            if event.type == pygame.MOUSEBUTTONDOWN:\n                if restart_button_rect.collidepoint(event.pos):\n                    bird_pos = [50, SCREEN_HEIGHT // 2]\n                    bird_vel = 0\n                    obstacles = []\n                    score = 0\n                    speed = OBSTACLE_SPEED\n                    last_speed_increase = pygame.time.get_ticks()\n                    running = False\n\n    main_menu()\n\n# Start the game\nmain_menu()\ngame_loop()\n```\n<FILE_END>",
  "finalized_code": "<PROJECT_NAME_START>FlappyBirdClone<PROJECT_NAME_END>\n\n<FILE_START>\nmain.py\n```python\nimport pygame\nimport sys\nimport random\n\n# Constants\nSCREEN_WIDTH = 400\nSCREEN_HEIGHT = 600\nGRAVITY = 0.25\nBIRD_FLAP_POWER = 5\nOBSTACLE_SPEED = 5\nOBSTACLE_WIDTH = 70\nOBSTACLE_HEIGHT = 500\nOBSTACLE_GAP = 200\nSPEED_INCREASE_INTERVAL = 5000  # in milliseconds\nSPEED_INCREASE_FACTOR = 1.4\n\n# Initialize Pygame\npygame.init()\n\n# Set up the screen\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption('Flappy Bird Clone')\n\n# Load images\nBIRD_IMAGE = pygame.Surface((30, 30))\nBIRD_IMAGE.fill((255, 255, 0))\nOBSTACLE_IMAGE = pygame.Surface((OBSTACLE_WIDTH, OBSTACLE_HEIGHT))\nOBSTACLE_IMAGE.fill((0, 255, 0))\n\n# Game variables\nbird_pos = [50, SCREEN_HEIGHT // 2]\nbird_vel = 0\nobstacles = []\nscore = 0\nhigh_score = 0\nspeed = OBSTACLE_SPEED\nlast_speed_increase = pygame.time.get_ticks()\n\n# Main menu\ndef main_menu():\n    global high_score\n    running = True\n    while running:\n        screen.fill((0, 0, 0))\n        font = pygame.font.SysFont(None, 36)\n        text = font.render('Flappy Bird Clone', True, (255, 255, 255))\n        text_rect = text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 4))\n        screen.blit(text, text_rect)\n\n        start_button = font.render('Start Game', True, (255, 255, 255))\n        start_button_rect = start_button.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))\n        screen.blit(start_button, start_button_rect)\n\n        high_score_text = font.render(f'High Score: {high_score}', True, (255, 255, 255))\n        high_score_rect = high_score_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 + 50))\n        screen.blit(high_score_text, high_score_rect)\n\n        pygame.display.flip()\n\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                pygame.quit()\n                sys.exit()\n            if event.type == pygame.MOUSEBUTTONDOWN:\n                if start_button_rect.collidepoint(event.pos):\n                    running = False\n\n# Game loop\ndef game_loop():\n    global bird_pos, bird_vel, obstacles, score, high_score, speed, last_speed_increase\n    clock = pygame.time.Clock()\n    running = True\n    while running:\n        # Event handling\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                pygame.quit()\n                sys.exit()\n            if event.type == pygame.MOUSEBUTTONDOWN:\n                bird_vel = -BIRD_FLAP_POWER\n\n        # Bird physics\n        bird_vel += GRAVITY\n        bird_pos[1] += bird_vel\n\n        # Move obstacles\n        obstacles = [(obs[0] - speed, obs[1]) for obs in obstacles if obs[0] > -OBSTACLE_WIDTH]\n\n        # Add new obstacle\n        if not obstacles or obstacles[-1][0] < SCREEN_WIDTH - 300:\n            height = random.randint(100, SCREEN_HEIGHT - 100 - OBSTACLE_GAP)\n            obstacles.append((SCREEN_WIDTH, height))\n\n        # Check for collisions\n        bird_rect = pygame.Rect(bird_pos[0], bird_pos[1], BIRD_IMAGE.get_width(), BIRD_IMAGE.get_height())\n        for obs in obstacles:\n            obs_rect_top = pygame.Rect(obs[0], 0, OBSTACLE_WIDTH, obs[1])\n            obs_rect_bottom = pygame.Rect(obs[0], obs[1] + OBSTACLE_GAP, OBSTACLE_WIDTH, SCREEN_HEIGHT - obs[1] - OBSTACLE_GAP)\n            if bird_rect.colliderect(obs_rect_top) or bird_rect.colliderect(obs_rect_bottom):\n                running = False\n            if bird_pos[1] > SCREEN_HEIGHT or bird_pos[1] < 0:\n                running = False\n\n        # Increase speed\n        current_time = pygame.time.get_ticks()\n        if current_time - last_speed_increase > SPEED_INCREASE_INTERVAL:\n            speed *= SPEED_INCREASE_FACTOR\n            last_speed_increase = current_time\n\n        # Update score\n        score += 1\n        high_score = max(high_score, score)\n\n        # Draw everything\n        screen.fill((0, 0, 0))\n        for obs in obstacles:\n            screen.blit(OBSTACLE_IMAGE, (obs[0], obs[1] - OBSTACLE_HEIGHT))\n            screen.blit(OBSTACLE_IMAGE, (obs[0], obs[1] + OBSTACLE_GAP))\n        screen.blit(BIRD_IMAGE, bird_pos)\n\n        # Draw score\n        font = pygame.font.SysFont(None, 36)\n        score_text = font.render(f'Score: {score}', True, (255, 255, 255))\n        screen.blit(score_text, (10, 10))\n\n        # Draw speed\n        speed_text = font.render(f'Speed: {speed:.1f}', True, (255, 255, 255))\n        screen.blit(speed_text, (10, 50))\n\n        pygame.display.flip()\n        clock.tick(30)\n\n    # Game over\n    game_over()\n\n# Game over screen\ndef game_over():\n    global bird_pos, bird_vel, obstacles, score, speed, last_speed_increase\n    running = True\n    while running:\n        screen.fill((0, 0, 0))\n        font = pygame.font.SysFont(None, 36)\n        text = font.render('Game Over', True, (255, 255, 255))\n        text_rect = text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 4))\n        screen.blit(text, text_rect)\n\n        restart_button = font.render('Restart', True, (255, 255, 255))\n        restart_button_rect = restart_button.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))\n        screen.blit(restart_button, restart_button_rect)\n\n        score_text = font.render(f'Score: {score}', True, (255, 255, 255))\n        score_rect = score_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 + 50))\n        screen.blit(score_text, score_rect)\n\n        pygame.display.flip()\n\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                pygame.quit()\n                sys.exit()\n            if event.type == pygame.MOUSEBUTTONDOWN:\n                if restart_button_rect.collidepoint(event.pos):\n                    bird_pos = [50, SCREEN_HEIGHT // 2]\n                    bird_vel = 0\n                    obstacles = []\n                    score = 0\n                    speed = OBSTACLE_SPEED\n                    last_speed_increase = pygame.time.get_ticks()\n                    running = False\n\n    main_menu()\n\n# Start the game\nmain_menu()\ngame_loop()\n```\n<FILE_END>"
}
