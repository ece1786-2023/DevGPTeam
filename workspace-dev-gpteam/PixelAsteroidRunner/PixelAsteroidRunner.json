{
    "refine_requirements": "\n# Endless runner game combining Flappy Bird's control mechanics with an asteroid dodging challenge in a pixel-art style for desktop.\n\n```\n1. Implement a main menu with a 'Play' button to start the game.\n2. Character control uses simple mouse clicks or spacebar taps for ascending, with automatic descending due to in-game gravity.\n3. Design asteroids to spawn and move towards the player from various directions, with increasing difficulty over time.\n4. Develop a scoring system that tracks the duration of survival time as the player's score.\n5. Set the game to end when the player's character collides with an asteroid, then display the final score.\n6. Ensure the game difficulty scales by increasing the character's speed and the frequency and speed of asteroids as time progresses.\n7. Include a quick restart feature post-game session to allow players to start a new game immediately.\n8. Focus on dodging mechanics without additional player interactions such as power-ups or collectibles.\n```\n",
    "developed_code": "<PROJECT_NAME_START>PixelAsteroidRunner<PROJECT_NAME_END>\n\n<FILE_START>\nmain.py\n```python\nimport pygame\nimport random\nimport sys\n\n# Initialize Pygame\npygame.init()\n\n# Constants\nSCREEN_WIDTH, SCREEN_HEIGHT = 800, 600\nPLAYER_SIZE = 50\nASTEROID_SIZE = 50\nGRAVITY = 0.5\nJUMP_STRENGTH = 10\nASTEROID_SPAWN_RATE = 1500  # in milliseconds\nGAME_FONT = pygame.font.Font(None, 36)\n\n# Colors\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\n\n# Set up the screen\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption('Pixel Asteroid Runner')\n\n# Player class\nclass Player(pygame.sprite.Sprite):\n    def __init__(self):\n        super().__init__()\n        self.surf = pygame.Surface((PLAYER_SIZE, PLAYER_SIZE))\n        self.surf.fill(WHITE)\n        self.rect = self.surf.get_rect(center=(SCREEN_WIDTH // 4, SCREEN_HEIGHT // 2))\n        self.velocity = 0\n\n    def update(self):\n        self.velocity += GRAVITY\n        self.rect.move_ip(0, self.velocity)\n\n        if self.rect.top <= 0:\n            self.rect.top = 0\n            self.velocity = 0\n        if self.rect.bottom >= SCREEN_HEIGHT:\n            self.rect.bottom = SCREEN_HEIGHT\n            self.velocity = 0\n\n    def jump(self):\n        self.velocity = -JUMP_STRENGTH\n\n# Asteroid class\nclass Asteroid(pygame.sprite.Sprite):\n    def __init__(self):\n        super().__init__()\n        self.surf = pygame.Surface((ASTEROID_SIZE, ASTEROID_SIZE))\n        self.surf.fill(WHITE)\n        self.rect = self.surf.get_rect(\n            center=(\n                random.randint(SCREEN_WIDTH + 20, SCREEN_WIDTH + 100),\n                random.randint(0, SCREEN_HEIGHT),\n            )\n        )\n        self.speed = random.randint(5, 10)\n\n    def update(self):\n        self.rect.move_ip(-self.speed, 0)\n        if self.rect.right < 0:\n            self.kill()\n\n# Main menu\ndef main_menu():\n    title_font = pygame.font.Font(None, 54)\n    title_text = title_font.render('Pixel Asteroid Runner', True, WHITE)\n    play_button = GAME_FONT.render('Play', True, WHITE)\n    play_button_rect = play_button.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))\n\n    running = True\n    while running:\n        screen.fill(BLACK)\n        screen.blit(title_text, (SCREEN_WIDTH // 2 - title_text.get_width() // 2, SCREEN_HEIGHT // 4))\n        screen.blit(play_button, play_button_rect)\n\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                pygame.quit()\n                sys.exit()\n            if event.type == pygame.MOUSEBUTTONDOWN:\n                if play_button_rect.collidepoint(event.pos):\n                    running = False\n            if event.type == pygame.KEYDOWN:\n                if event.key == pygame.K_SPACE:\n                    running = False\n\n        pygame.display.flip()\n\n# Game loop\ndef game():\n    player = Player()\n    asteroids = pygame.sprite.Group()\n    all_sprites = pygame.sprite.Group()\n    all_sprites.add(player)\n\n    score = 0\n    clock = pygame.time.Clock()\n    pygame.time.set_timer(pygame.USEREVENT, ASTEROID_SPAWN_RATE)\n\n    running = True\n    while running:\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                pygame.quit()\n                sys.exit()\n            if event.type == pygame.USEREVENT:\n                new_asteroid = Asteroid()\n                asteroids.add(new_asteroid)\n                all_sprites.add(new_asteroid)\n            if event.type == pygame.KEYDOWN or event.type == pygame.MOUSEBUTTONDOWN:\n                player.jump()\n\n        all_sprites.update()\n\n        if pygame.sprite.spritecollideany(player, asteroids):\n            running = False\n\n        screen.fill(BLACK)\n        for entity in all_sprites:\n            screen.blit(entity.surf, entity.rect)\n\n        score += 1\n        score_text = GAME_FONT.render(f'Score: {score}', True, WHITE)\n        screen.blit(score_text, (10, 10))\n\n        pygame.display.flip()\n        clock.tick(60)\n\n    return score\n\n# Post-game screen\ndef game_over(score):\n    game_over_text = GAME_FONT.render('Game Over', True, WHITE)\n    score_text = GAME_FONT.render(f'Final Score: {score}', True, WHITE)\n    restart_text = GAME_FONT.render('Click to Restart', True, WHITE)\n\n    running = True\n    while running:\n        screen.fill(BLACK)\n        screen.blit(game_over_text, (SCREEN_WIDTH // 2 - game_over_text.get_width() // 2, SCREEN_HEIGHT // 4))\n        screen.blit(score_text, (SCREEN_WIDTH // 2 - score_text.get_width() // 2, SCREEN_HEIGHT // 2))\n        screen.blit(restart_text, (SCREEN_WIDTH // 2 - restart_text.get_width() // 2, SCREEN_HEIGHT // 1.5))\n\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                pygame.quit()\n                sys.exit()\n            if event.type == pygame.MOUSEBUTTONDOWN or event.type == pygame.KEYDOWN:\n                running = False\n\n        pygame.display.flip()\n\n# Main function\ndef main():\n    main_menu()\n    score = game()\n    game_over(score)\n    main()\n\nif __name__ == '__main__':\n    main()\n```\n<FILE_END>",
    "finalized_code": "<PROJECT_NAME_START>PixelAsteroidRunner<PROJECT_NAME_END>\n\n<FILE_START>\nmain.py\n```python\nimport pygame\nimport random\nimport sys\n\n# Initialize Pygame\npygame.init()\n\n# Constants\nSCREEN_WIDTH, SCREEN_HEIGHT = 800, 600\nPLAYER_SIZE = 50\nASTEROID_SIZE = 50\nGRAVITY = 0.5\nJUMP_STRENGTH = 10\nASTEROID_SPAWN_RATE = 1500  # in milliseconds\nGAME_FONT = pygame.font.Font(None, 36)\nASTEROID_SPEED_INCREMENT = 0.1  # Incremental speed for difficulty scaling\nASTEROID_SPAWN_RATE_DECREMENT = 50  # Decremental spawn rate for difficulty scaling\n\n# Colors\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\n\n# Set up the screen\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption('Pixel Asteroid Runner')\n\n# Player class\nclass Player(pygame.sprite.Sprite):\n    def __init__(self):\n        super().__init__()\n        self.surf = pygame.Surface((PLAYER_SIZE, PLAYER_SIZE))\n        self.surf.fill(WHITE)\n        self.rect = self.surf.get_rect(center=(SCREEN_WIDTH // 4, SCREEN_HEIGHT // 2))\n        self.velocity = 0\n\n    def update(self):\n        self.velocity += GRAVITY\n        self.rect.move_ip(0, self.velocity)\n\n        if self.rect.top <= 0:\n            self.rect.top = 0\n            self.velocity = 0\n        if self.rect.bottom >= SCREEN_HEIGHT:\n            self.rect.bottom = SCREEN_HEIGHT\n            self.velocity = 0\n\n    def jump(self):\n        self.velocity = -JUMP_STRENGTH\n\n# Asteroid class\nclass Asteroid(pygame.sprite.Sprite):\n    def __init__(self, speed):\n        super().__init__()\n        self.surf = pygame.Surface((ASTEROID_SIZE, ASTEROID_SIZE))\n        self.surf.fill(WHITE)\n        self.rect = self.surf.get_rect(\n            center=(\n                random.randint(SCREEN_WIDTH + 20, SCREEN_WIDTH + 100),\n                random.randint(0, SCREEN_HEIGHT),\n            )\n        )\n        self.speed = speed\n\n    def update(self):\n        self.rect.move_ip(-self.speed, 0)\n        if self.rect.right < 0:\n            self.kill()\n\n# Main menu\ndef main_menu():\n    title_font = pygame.font.Font(None, 54)\n    title_text = title_font.render('Pixel Asteroid Runner', True, WHITE)\n    play_button = GAME_FONT.render('Play', True, WHITE)\n    play_button_rect = play_button.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))\n\n    running = True\n    while running:\n        screen.fill(BLACK)\n        screen.blit(title_text, (SCREEN_WIDTH // 2 - title_text.get_width() // 2, SCREEN_HEIGHT // 4))\n        screen.blit(play_button, play_button_rect)\n\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                pygame.quit()\n                sys.exit()\n            if event.type == pygame.MOUSEBUTTONDOWN:\n                if play_button_rect.collidepoint(event.pos):\n                    running = False\n            if event.type == pygame.KEYDOWN:\n                if event.key == pygame.K_SPACE:\n                    running = False\n\n        pygame.display.flip()\n\n# Game loop\ndef game():\n    player = Player()\n    asteroids = pygame.sprite.Group()\n    all_sprites = pygame.sprite.Group()\n    all_sprites.add(player)\n\n    score = 0\n    asteroid_speed = 5\n    clock = pygame.time.Clock()\n    pygame.time.set_timer(pygame.USEREVENT, ASTEROID_SPAWN_RATE)\n\n    running = True\n    while running:\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                pygame.quit()\n                sys.exit()\n            if event.type == pygame.USEREVENT:\n                new_asteroid = Asteroid(asteroid_speed)\n                asteroids.add(new_asteroid)\n                all_sprites.add(new_asteroid)\n                # Increase difficulty over time\n                asteroid_speed += ASTEROID_SPEED_INCREMENT\n                pygame.time.set_timer(pygame.USEREVENT, max(ASTEROID_SPAWN_RATE - int(score / ASTEROID_SPAWN_RATE_DECREMENT), 300))\n            if event.type == pygame.KEYDOWN or event.type == pygame.MOUSEBUTTONDOWN:\n                player.jump()\n\n        all_sprites.update()\n\n        if pygame.sprite.spritecollideany(player, asteroids):\n            running = False\n\n        screen.fill(BLACK)\n        for entity in all_sprites:\n            screen.blit(entity.surf, entity.rect)\n\n        score += 1\n        score_text = GAME_FONT.render(f'Score: {score}', True, WHITE)\n        screen.blit(score_text, (10, 10))\n\n        pygame.display.flip()\n        clock.tick(60)\n\n    return score\n\n# Post-game screen\ndef game_over(score):\n    game_over_text = GAME_FONT.render('Game Over', True, WHITE)\n    score_text = GAME_FONT.render(f'Final Score: {score}', True, WHITE)\n    restart_text = GAME_FONT.render('Click to Restart', True, WHITE)\n\n    running = True\n    while running:\n        screen.fill(BLACK)\n        screen.blit(game_over_text, (SCREEN_WIDTH // 2 - game_over_text.get_width() // 2, SCREEN_HEIGHT // 4))\n        screen.blit(score_text, (SCREEN_WIDTH // 2 - score_text.get_width() // 2, SCREEN_HEIGHT // 2))\n        screen.blit(restart_text, (SCREEN_WIDTH // 2 - restart_text.get_width() // 2, SCREEN_HEIGHT // 1.5))\n\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                pygame.quit()\n                sys.exit()\n            if event.type == pygame.MOUSEBUTTONDOWN or event.type == pygame.KEYDOWN:\n                running = False\n                main()  # Restart the game\n\n        pygame.display.flip()\n\n# Main function\ndef main():\n    main_menu()\n    score = game()\n    game_over(score)\n\nif __name__ == '__main__':\n    main()\n```\n<FILE_END>"
}