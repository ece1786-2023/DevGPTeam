{
    "refine_requirements": "\n# Endless runner game combining Flappy Bird's mechanics with asteroid dodging challenges\n```\n1. Implement a main menu for game start and instructions.\n2. Character begins in free-fall; players use keyboard input to flap and avoid descending off-screen.\n3. Start with 3 asteroids on-screen, increasing by 1 every 5 seconds to escalate difficulty.\n4. Utilize keyboard controls for the flapping mechanic; specific keys to be determined.\n5. Scoring is based on survival time; the longer the player lasts, the higher the score.\n6. Game ends upon collision with an asteroid or falling off-screen, with an option to restart.\n7. Core gameplay interaction is limited to dodging asteroids; no collectibles or power-ups.\n8. Asteroids spawn randomly from the right and left with varying speeds.\n```\n",
    "developed_code": "<PROJECT_NAME_START>EndlessAsteroidRunner<PROJECT_NAME_END>\n\n<FILE_START>\nmain.py\n```python\nimport pygame\nimport random\nimport sys\n\n# Constants\nSCREEN_WIDTH = 800\nSCREEN_HEIGHT = 600\nPLAYER_SIZE = 50\nASTEROID_SIZE = 50\nGRAVITY = 0.5\nFLAP_STRENGTH = -10\nASTEROID_SPAWN_TIME = 5000  # milliseconds\n\n# Initialize Pygame\npygame.init()\n\n# Set up the screen\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption('Endless Asteroid Runner')\n\n# Load fonts\nfont = pygame.font.Font(None, 36)\n\n# Define colors\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\n\n# Player class\nclass Player(pygame.sprite.Sprite):\n    def __init__(self):\n        super().__init__()\n        self.image = pygame.Surface((PLAYER_SIZE, PLAYER_SIZE))\n        self.image.fill(WHITE)\n        self.rect = self.image.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))\n        self.velocity = 0\n\n    def update(self):\n        self.velocity += GRAVITY\n        self.rect.y += self.velocity\n\n        if self.rect.top <= 0:\n            self.rect.top = 0\n            self.velocity = 0\n        elif self.rect.bottom >= SCREEN_HEIGHT:\n            self.rect.bottom = SCREEN_HEIGHT\n            self.velocity = 0\n\n    def flap(self):\n        self.velocity = FLAP_STRENGTH\n\n# Asteroid class\nclass Asteroid(pygame.sprite.Sprite):\n    def __init__(self):\n        super().__init__()\n        self.image = pygame.Surface((ASTEROID_SIZE, ASTEROID_SIZE))\n        self.image.fill(WHITE)\n        self.rect = self.image.get_rect(center=(random.choice([0, SCREEN_WIDTH]), random.randint(0, SCREEN_HEIGHT)))\n        self.speed = random.randint(1, 5)\n        self.direction = random.choice([-1, 1])\n\n    def update(self):\n        self.rect.x += self.speed * self.direction\n        if self.rect.right < 0 or self.rect.left > SCREEN_WIDTH:\n            self.kill()\n\n# Game class\nclass Game:\n    def __init__(self):\n        self.player = Player()\n        self.asteroids = pygame.sprite.Group()\n        self.all_sprites = pygame.sprite.Group(self.player)\n        self.score = 0\n        self.last_asteroid_spawn = pygame.time.get_ticks()\n\n    def run(self):\n        running = True\n        clock = pygame.time.Clock()\n\n        while running:\n            for event in pygame.event.get():\n                if event.type == pygame.QUIT:\n                    running = False\n                elif event.type == pygame.KEYDOWN:\n                    if event.key == pygame.K_SPACE:\n                        self.player.flap()\n\n            # Spawn asteroids\n            current_time = pygame.time.get_ticks()\n            if current_time - self.last_asteroid_spawn > ASTEROID_SPAWN_TIME:\n                self.last_asteroid_spawn = current_time\n                new_asteroid = Asteroid()\n                self.asteroids.add(new_asteroid)\n                self.all_sprites.add(new_asteroid)\n\n            # Update\n            self.all_sprites.update()\n\n            # Check for collisions\n            if pygame.sprite.spritecollide(self.player, self.asteroids, False):\n                running = False\n\n            # Draw everything\n            screen.fill(BLACK)\n            self.all_sprites.draw(screen)\n\n            # Display score\n            score_text = font.render(f'Score: {self.score}', True, WHITE)\n            screen.blit(score_text, (10, 10))\n\n            pygame.display.flip()\n\n            # Increase score\n            self.score += 1\n\n            # Cap the frame rate\n            clock.tick(60)\n\n        pygame.quit()\n        sys.exit()\n\n# Main menu\ndef main_menu():\n    menu = True\n    while menu:\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                pygame.quit()\n                sys.exit()\n            elif event.type == pygame.KEYDOWN:\n                if event.key == pygame.K_SPACE:\n                    menu = False\n\n        screen.fill(BLACK)\n        title_text = font.render('Endless Asteroid Runner', True, WHITE)\n        instruction_text = font.render('Press SPACE to start', True, WHITE)\n        screen.blit(title_text, (SCREEN_WIDTH // 2 - title_text.get_width() // 2, SCREEN_HEIGHT // 2 - title_text.get_height() // 2))\n        screen.blit(instruction_text, (SCREEN_WIDTH // 2 - instruction_text.get_width() // 2, SCREEN_HEIGHT // 2 + 50))\n        pygame.display.flip()\n\n# Start the game\nmain_menu()\ngame = Game()\ngame.run()\n```\n<FILE_END>",
    "finalized_code": "<PROJECT_NAME_START>EndlessAsteroidRunner<PROJECT_NAME_END>\n\n<FILE_START>\nmain.py\n```python\nimport pygame\nimport random\nimport sys\nfrom pygame.locals import *\n\n# Constants\nSCREEN_WIDTH = 800\nSCREEN_HEIGHT = 600\nPLAYER_SIZE = 50\nASTEROID_SIZE = 50\nGRAVITY = 0.5\nFLAP_STRENGTH = -10\nASTEROID_SPAWN_TIME = 5000  # milliseconds\nASTEROID_INCREASE_TIME = 5000  # milliseconds for increasing asteroid count\nINITIAL_ASTEROID_COUNT = 3\n\n# Initialize Pygame\npygame.init()\n\n# Set up the screen\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption('Endless Asteroid Runner')\n\n# Load fonts\nfont = pygame.font.Font(None, 36)\n\n# Define colors\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\n\n# Player class\nclass Player(pygame.sprite.Sprite):\n    def __init__(self):\n        super().__init__()\n        self.image = pygame.Surface((PLAYER_SIZE, PLAYER_SIZE))\n        self.image.fill(WHITE)\n        self.rect = self.image.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))\n        self.velocity = 0\n\n    def update(self):\n        self.velocity += GRAVITY\n        self.rect.y += int(self.velocity)\n\n        if self.rect.top <= 0:\n            self.rect.top = 0\n            self.velocity = 0\n        elif self.rect.bottom >= SCREEN_HEIGHT:\n            self.game_over()\n\n    def flap(self):\n        self.velocity = FLAP_STRENGTH\n\n    def game_over(self):\n        pygame.event.post(pygame.event.Event(QUIT))\n\n# Asteroid class\nclass Asteroid(pygame.sprite.Sprite):\n    def __init__(self, speed_range=(1, 5)):\n        super().__init__()\n        self.image = pygame.Surface((ASTEROID_SIZE, ASTEROID_SIZE))\n        self.image.fill(WHITE)\n        self.rect = self.image.get_rect(center=(random.choice([0, SCREEN_WIDTH]), random.randint(0, SCREEN_HEIGHT)))\n        self.speed = random.randint(*speed_range)\n        self.direction = random.choice([-1, 1])\n\n    def update(self):\n        self.rect.x += self.speed * self.direction\n        if self.rect.right < 0 or self.rect.left > SCREEN_WIDTH:\n            self.kill()\n\n# Game class\nclass Game:\n    def __init__(self):\n        self.player = Player()\n        self.asteroids = pygame.sprite.Group()\n        self.all_sprites = pygame.sprite.Group(self.player)\n        self.score = 0\n        self.last_asteroid_spawn = pygame.time.get_ticks()\n        self.asteroid_spawn_time = ASTEROID_SPAWN_TIME\n        self.asteroid_speed_range = (1, 5)\n\n    def run(self):\n        running = True\n        clock = pygame.time.Clock()\n        asteroid_count = INITIAL_ASTEROID_COUNT\n        last_asteroid_increase = pygame.time.get_ticks()\n\n        while running:\n            for event in pygame.event.get():\n                if event.type == QUIT:\n                    running = False\n                elif event.type == KEYDOWN:\n                    if event.key == K_SPACE:\n                        self.player.flap()\n\n            # Spawn asteroids\n            current_time = pygame.time.get_ticks()\n            if current_time - self.last_asteroid_spawn > self.asteroid_spawn_time:\n                self.last_asteroid_spawn = current_time\n                for _ in range(asteroid_count):\n                    new_asteroid = Asteroid(self.asteroid_speed_range)\n                    self.asteroids.add(new_asteroid)\n                    self.all_sprites.add(new_asteroid)\n\n            # Increase asteroid count every 5 seconds\n            if current_time - last_asteroid_increase > ASTEROID_INCREASE_TIME:\n                last_asteroid_increase = current_time\n                asteroid_count += 1\n\n            # Update\n            self.all_sprites.update()\n\n            # Check for collisions\n            if pygame.sprite.spritecollide(self.player, self.asteroids, False):\n                running = False\n\n            # Draw everything\n            screen.fill(BLACK)\n            self.all_sprites.draw(screen)\n\n            # Display score\n            score_text = font.render(f'Score: {self.score}', True, WHITE)\n            screen.blit(score_text, (10, 10))\n\n            pygame.display.flip()\n\n            # Increase score\n            self.score += 1\n\n            # Cap the frame rate\n            clock.tick(60)\n\n        pygame.quit()\n        sys.exit()\n\n# Main menu\ndef main_menu():\n    menu = True\n    while menu:\n        for event in pygame.event.get():\n            if event.type == QUIT:\n                pygame.quit()\n                sys.exit()\n            elif event.type == KEYDOWN:\n                if event.key == K_SPACE:\n                    menu = False\n\n        screen.fill(BLACK)\n        title_text = font.render('Endless Asteroid Runner', True, WHITE)\n        instruction_text = font.render('Press SPACE to start', True, WHITE)\n        screen.blit(title_text, (SCREEN_WIDTH // 2 - title_text.get_width() // 2, SCREEN_HEIGHT // 2 - title_text.get_height() // 2))\n        screen.blit(instruction_text, (SCREEN_WIDTH // 2 - instruction_text.get_width() // 2, SCREEN_HEIGHT // 2 + 50))\n        pygame.display.flip()\n\n# Start the game\nmain_menu()\ngame = Game()\ngame.run()\n```\n<FILE_END>"
}