{
    "refine_requirements": "\n# A brick breaker game with power-up mechanics and progressive difficulty.\n\n```\n1. Implement a main menu with keyboard controls for game start.\n2. Design levels where players clear all bricks to progress, with increasing difficulty.\n3. Include green bricks that break on impact and red bricks that release a power-up.\n4. Utilize keyboard controls for horizontal paddle movement at the screen's bottom.\n5. Create a scoring system that awards points for each brick destroyed.\n6. Give players three lives, with the game ending upon losing all lives and an option to restart.\n7. Program the power-up from red bricks to double the ball's size and change its color to red for 10 seconds.\n8. Ensure the ball's enlargement to exactly double its original size when a power-up is activated.\n```\n",
    "developed_code": "<PROJECT_NAME_START>BrickBreakerPowerUp<PROJECT_NAME_END>\n\n<FILE_START>\nmain.py\n```python\nimport pygame\nimport random\nimport time\n\n# Constants\nSCREEN_WIDTH, SCREEN_HEIGHT = 800, 600\nBRICK_WIDTH, BRICK_HEIGHT = 75, 30\nPADDLE_WIDTH, PADDLE_HEIGHT = 100, 20\nBALL_SIZE = 15\nBALL_SPEED = 5\nPADDLE_SPEED = 7\nGREEN_BRICK = 1\nRED_BRICK = 2\nBRICKS_PER_ROW = SCREEN_WIDTH // BRICK_WIDTH\nBRICK_ROWS = 5\nPOWER_UP_TIME = 10\n\n# Initialize Pygame\npygame.init()\n\n# Set up the screen\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption('Brick Breaker with Power-Up')\n\n# Colors\nWHITE = (255, 255, 255)\nGREEN = (0, 255, 0)\nRED = (255, 0, 0)\nBLUE = (0, 0, 255)\nBLACK = (0, 0, 0)\n\n# Game variables\nscore = 0\nlives = 3\nball_speed_x = BALL_SPEED\nball_speed_y = -BALL_SPEED\npower_up_active = False\npower_up_start_time = 0\n\n# Paddle\npaddle = pygame.Rect((SCREEN_WIDTH // 2 - PADDLE_WIDTH // 2, SCREEN_HEIGHT - 40), (PADDLE_WIDTH, PADDLE_HEIGHT))\n\n# Ball\nball = pygame.Rect((SCREEN_WIDTH // 2 - BALL_SIZE // 2, SCREEN_HEIGHT // 2 - BALL_SIZE // 2), (BALL_SIZE, BALL_SIZE))\n\n# Bricks\nbricks = []\nfor y in range(BRICK_ROWS):\n    for x in range(BRICKS_PER_ROW):\n        brick_type = GREEN_BRICK if random.random() > 0.2 else RED_BRICK\n        color = GREEN if brick_type == GREEN_BRICK else RED\n        bricks.append({'rect': pygame.Rect(x * BRICK_WIDTH, y * (BRICK_HEIGHT + 5) + 50, BRICK_WIDTH, BRICK_HEIGHT), 'color': color, 'type': brick_type})\n\n# Main loop\nrunning = True\ngame_active = False\nwhile running:\n    screen.fill(BLACK)\n\n    # Event handling\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n        if event.type == pygame.KEYDOWN:\n            if event.key == pygame.K_SPACE and not game_active:\n                game_active = True\n\n    # Game logic\n    if game_active:\n        # Paddle movement\n        keys = pygame.key.get_pressed()\n        if keys[pygame.K_LEFT] and paddle.left > 0:\n            paddle.move_ip(-PADDLE_SPEED, 0)\n        if keys[pygame.K_RIGHT] and paddle.right < SCREEN_WIDTH:\n            paddle.move_ip(PADDLE_SPEED, 0)\n\n        # Ball movement\n        ball.move_ip(ball_speed_x, ball_speed_y)\n\n        # Ball collision with walls\n        if ball.left <= 0 or ball.right >= SCREEN_WIDTH:\n            ball_speed_x = -ball_speed_x\n        if ball.top <= 0:\n            ball_speed_y = -ball_speed_y\n        if ball.bottom >= SCREEN_HEIGHT:\n            lives -= 1\n            ball = pygame.Rect((SCREEN_WIDTH // 2 - BALL_SIZE // 2, SCREEN_HEIGHT // 2 - BALL_SIZE // 2), (BALL_SIZE, BALL_SIZE))\n            ball_speed_y = -BALL_SPEED\n            if lives == 0:\n                game_active = False\n\n        # Ball collision with paddle\n        if ball.colliderect(paddle):\n            ball_speed_y = -ball_speed_y\n\n        # Ball collision with bricks\n        for brick in bricks[:]:\n            if ball.colliderect(brick['rect']):\n                ball_speed_y = -ball_speed_y\n                bricks.remove(brick)\n                score += 10\n                if brick['type'] == RED_BRICK:\n                    power_up_active = True\n                    power_up_start_time = time.time()\n                    ball = pygame.Rect(ball.left, ball.top, BALL_SIZE * 2, BALL_SIZE * 2)\n                    ball_speed_x, ball_speed_y = ball_speed_x * 1.5, ball_speed_y * 1.5\n\n        # Power-up duration\n        if power_up_active and time.time() - power_up_start_time > POWER_UP_TIME:\n            power_up_active = False\n            ball = pygame.Rect(ball.left, ball.top, BALL_SIZE, BALL_SIZE)\n            ball_speed_x, ball_speed_y = BALL_SPEED, -BALL_SPEED\n\n        # Draw ball\n        pygame.draw.ellipse(screen, RED if power_up_active else BLUE, ball)\n\n        # Draw paddle\n        pygame.draw.rect(screen, WHITE, paddle)\n\n        # Draw bricks\n        for brick in bricks:\n            pygame.draw.rect(screen, brick['color'], brick['rect'])\n\n        # Draw score and lives\n        font = pygame.font.Font(None, 36)\n        score_text = font.render(f'Score: {score}', True, WHITE)\n        lives_text = font.render(f'Lives: {lives}', True, WHITE)\n        screen.blit(score_text, (5, 5))\n        screen.blit(lives_text, (SCREEN_WIDTH - lives_text.get_width() - 5, 5))\n\n    else:\n        # Main menu\n        font = pygame.font.Font(None, 74)\n        title_text = font.render('Brick Breaker', True, WHITE)\n        instruction_text = font.render('Press SPACE to start', True, WHITE)\n        screen.blit(title_text, (SCREEN_WIDTH // 2 - title_text.get_width() // 2, SCREEN_HEIGHT // 3))\n        screen.blit(instruction_text, (SCREEN_WIDTH // 2 - instruction_text.get_width() // 2, SCREEN_HEIGHT // 2))\n\n    # Update the display\n    pygame.display.flip()\n    pygame.time.Clock().tick(60)\n\npygame.quit()\n```\n<FILE_END>",
    "finalized_code": "<PROJECT_NAME_START>BrickBreakerPowerUp<PROJECT_NAME_END>\n\n<FILE_START>\nmain.py\n```python\nimport pygame\nimport random\nimport time\n\n# Constants\nSCREEN_WIDTH, SCREEN_HEIGHT = 800, 600\nBRICK_WIDTH, BRICK_HEIGHT = 75, 30\nPADDLE_WIDTH, PADDLE_HEIGHT = 100, 20\nBALL_SIZE = 15\nBALL_SPEED = 5\nPADDLE_SPEED = 7\nGREEN_BRICK = 1\nRED_BRICK = 2\nBRICKS_PER_ROW = SCREEN_WIDTH // BRICK_WIDTH\nBRICK_ROWS = 5\nPOWER_UP_TIME = 10\n\n# Initialize Pygame\npygame.init()\n\n# Set up the screen\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption('Brick Breaker with Power-Up')\n\n# Colors\nWHITE = (255, 255, 255)\nGREEN = (0, 255, 0)\nRED = (255, 0, 0)\nBLUE = (0, 0, 255)\nBLACK = (0, 0, 0)\n\n# Game variables\nscore = 0\nlives = 3\nball_speed_x = BALL_SPEED\nball_speed_y = -BALL_SPEED\npower_up_active = False\npower_up_start_time = 0\n\n# Paddle\npaddle = pygame.Rect((SCREEN_WIDTH // 2 - PADDLE_WIDTH // 2, SCREEN_HEIGHT - 40), (PADDLE_WIDTH, PADDLE_HEIGHT))\n\n# Ball\nball = pygame.Rect((SCREEN_WIDTH // 2 - BALL_SIZE // 2, SCREEN_HEIGHT // 2 - BALL_SIZE // 2), (BALL_SIZE, BALL_SIZE))\n\n# Bricks\nbricks = []\nfor y in range(BRICK_ROWS):\n    for x in range(BRICKS_PER_ROW):\n        brick_type = GREEN_BRICK if random.random() > 0.2 else RED_BRICK\n        color = GREEN if brick_type == GREEN_BRICK else RED\n        bricks.append({'rect': pygame.Rect(x * BRICK_WIDTH, y * (BRICK_HEIGHT + 5) + 50, BRICK_WIDTH, BRICK_HEIGHT), 'color': color, 'type': brick_type})\n\n# Main loop\nrunning = True\ngame_active = False\nwhile running:\n    screen.fill(BLACK)\n\n    # Event handling\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n        if event.type == pygame.KEYDOWN:\n            if event.key == pygame.K_SPACE and not game_active:\n                game_active = True\n                # Reset game variables when starting a new game\n                score = 0\n                lives = 3\n                ball_speed_x = BALL_SPEED\n                ball_speed_y = -BALL_SPEED\n                power_up_active = False\n                power_up_start_time = 0\n                # Reset bricks\n                bricks = []\n                for y in range(BRICK_ROWS):\n                    for x in range(BRICKS_PER_ROW):\n                        brick_type = GREEN_BRICK if random.random() > 0.2 else RED_BRICK\n                        color = GREEN if brick_type == GREEN_BRICK else RED\n                        bricks.append({'rect': pygame.Rect(x * BRICK_WIDTH, y * (BRICK_HEIGHT + 5) + 50, BRICK_WIDTH, BRICK_HEIGHT), 'color': color, 'type': brick_type})\n                # Reset ball and paddle positions\n                ball = pygame.Rect((SCREEN_WIDTH // 2 - BALL_SIZE // 2, SCREEN_HEIGHT // 2 - BALL_SIZE // 2), (BALL_SIZE, BALL_SIZE))\n                paddle = pygame.Rect((SCREEN_WIDTH // 2 - PADDLE_WIDTH // 2, SCREEN_HEIGHT - 40), (PADDLE_WIDTH, PADDLE_HEIGHT))\n\n    # Game logic\n    if game_active:\n        # Paddle movement\n        keys = pygame.key.get_pressed()\n        if keys[pygame.K_LEFT] and paddle.left > 0:\n            paddle.move_ip(-PADDLE_SPEED, 0)\n        if keys[pygame.K_RIGHT] and paddle.right < SCREEN_WIDTH:\n            paddle.move_ip(PADDLE_SPEED, 0)\n\n        # Ball movement\n        ball.move_ip(ball_speed_x, ball_speed_y)\n\n        # Ball collision with walls\n        if ball.left <= 0 or ball.right >= SCREEN_WIDTH:\n            ball_speed_x = -ball_speed_x\n        if ball.top <= 0:\n            ball_speed_y = -ball_speed_y\n        if ball.bottom >= SCREEN_HEIGHT:\n            lives -= 1\n            # Reset ball position and speed after losing a life\n            ball = pygame.Rect((SCREEN_WIDTH // 2 - BALL_SIZE // 2, SCREEN_HEIGHT // 2 - BALL_SIZE // 2), (BALL_SIZE, BALL_SIZE))\n            ball_speed_x = BALL_SPEED\n            ball_speed_y = -BALL_SPEED\n            # Deactivate power-up if active\n            power_up_active = False\n            if lives == 0:\n                game_active = False\n\n        # Ball collision with paddle\n        if ball.colliderect(paddle):\n            ball_speed_y = -ball_speed_y\n\n        # Ball collision with bricks\n        for brick in bricks[:]:\n            if ball.colliderect(brick['rect']):\n                ball_speed_y = -ball_speed_y\n                bricks.remove(brick)\n                score += 10\n                if brick['type'] == RED_BRICK:\n                    power_up_active = True\n                    power_up_start_time = time.time()\n                    # Enlarge the ball to double its size\n                    ball.inflate_ip(BALL_SIZE, BALL_SIZE)\n                    ball_speed_x, ball_speed_y = ball_speed_x * 1.5, ball_speed_y * 1.5\n\n        # Power-up duration\n        if power_up_active and time.time() - power_up_start_time > POWER_UP_TIME:\n            power_up_active = False\n            # Reset ball to original size\n            ball.inflate_ip(-BALL_SIZE, -BALL_SIZE)\n            ball_speed_x, ball_speed_y = BALL_SPEED, -BALL_SPEED\n\n        # Draw ball\n        pygame.draw.ellipse(screen, RED if power_up_active else BLUE, ball)\n\n        # Draw paddle\n        pygame.draw.rect(screen, WHITE, paddle)\n\n        # Draw bricks\n        for brick in bricks:\n            pygame.draw.rect(screen, brick['color'], brick['rect'])\n\n        # Draw score and lives\n        font = pygame.font.Font(None, 36)\n        score_text = font.render(f'Score: {score}', True, WHITE)\n        lives_text = font.render(f'Lives: {lives}', True, WHITE)\n        screen.blit(score_text, (5, 5))\n        screen.blit(lives_text, (SCREEN_WIDTH - lives_text.get_width() - 5, 5))\n\n    else:\n        # Main menu\n        font = pygame.font.Font(None, 74)\n        title_text = font.render('Brick Breaker', True, WHITE)\n        instruction_text = font.render('Press SPACE to start', True, WHITE)\n        screen.blit(title_text, (SCREEN_WIDTH // 2 - title_text.get_width() // 2, SCREEN_HEIGHT // 3))\n        screen.blit(instruction_text, (SCREEN_WIDTH // 2 - instruction_text.get_width() // 2, SCREEN_HEIGHT // 2))\n\n    # Update the display\n    pygame.display.flip()\n    pygame.time.Clock().tick(60)\n\npygame.quit()\n```\n<FILE_END>"
}