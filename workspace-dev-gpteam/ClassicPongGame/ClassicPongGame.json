{
    "refine_requirements": "\n# Classic Pong Game with Horizontal Paddles\n```\n1. Implement a startup screen displaying the game title \"Pong\" before transitioning to the gameplay area.\n2. Serve the ball from the center of the screen towards a random paddle when the game starts.\n3. No player progression system; the game is a continuous back-and-forth until one player wins.\n4. Players use the W and S keys (left player) and the up and down arrow keys (right player) to move their paddles horizontally. The space bar pauses and resumes the game.\n5. A point is scored when the ball goes out of bounds on the opponent's side of the screen.\n6. The game ends when a player reaches 5 points, followed by a winning message indicating the victorious player. Include an option to restart the game.\n7. The ball bounces off the screen's top and bottom edges, with the bounce angle depending on the hit location on the paddle.\n8. The ball's speed increases slightly with each hit on a paddle to progressively increase difficulty.\n9. Include functionality to pause and resume the game.\n10. Display a winning message when a player wins, indicating which player has won.\n```\n",
    "developed_code": "<PROJECT_NAME_START>ClassicPongGame<PROJECT_NAME_END>\n\n<FILE_START>\nmain.py\n```python\nimport pygame\nimport random\nimport sys\n\n# Initialize Pygame\npygame.init()\n\n# Constants\nSCREEN_WIDTH = 800\nSCREEN_HEIGHT = 600\nPADDLE_WIDTH = 15\nPADDLE_HEIGHT = 100\nBALL_SIZE = 15\nBALL_SPEED_INCREMENT = 0.5\nPADDLE_SPEED = 10\nFONT_SIZE = 32\nWINNING_SCORE = 5\n\n# Colors\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\n\n# Initialize screen\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption('Pong')\n\n# Initialize clock\nclock = pygame.time.Clock()\n\n# Initialize font\nfont = pygame.font.Font(None, FONT_SIZE)\n\n# Game states\nrunning = True\npaused = False\n\n# Game variables\nleft_score = 0\nright_score = 0\nball_speed_x = BALL_SPEED_INCREMENT * random.choice((1, -1))\nball_speed_y = BALL_SPEED_INCREMENT * random.choice((1, -1))\nball_pos = [SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2]\nleft_paddle_pos = [PADDLE_WIDTH, SCREEN_HEIGHT // 2 - PADDLE_HEIGHT // 2]\nright_paddle_pos = [SCREEN_WIDTH - 2 * PADDLE_WIDTH, SCREEN_HEIGHT // 2 - PADDLE_HEIGHT // 2]\n\ndef reset_ball():\n    global ball_pos, ball_speed_x, ball_speed_y\n    ball_pos = [SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2]\n    ball_speed_x = BALL_SPEED_INCREMENT * random.choice((1, -1))\n    ball_speed_y = BALL_SPEED_INCREMENT * random.choice((1, -1))\n\ndef draw_startup_screen():\n    screen.fill(BLACK)\n    title_text = font.render('Pong', True, WHITE)\n    title_rect = title_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))\n    screen.blit(title_text, title_rect)\n    pygame.display.flip()\n    pygame.time.wait(2000)\n\ndef draw_game():\n    screen.fill(BLACK)\n    pygame.draw.rect(screen, WHITE, (*left_paddle_pos, PADDLE_WIDTH, PADDLE_HEIGHT))\n    pygame.draw.rect(screen, WHITE, (*right_paddle_pos, PADDLE_WIDTH, PADDLE_HEIGHT))\n    pygame.draw.ellipse(screen, WHITE, (*ball_pos, BALL_SIZE, BALL_SIZE))\n    left_score_text = font.render(str(left_score), True, WHITE)\n    right_score_text = font.render(str(right_score), True, WHITE)\n    screen.blit(left_score_text, (SCREEN_WIDTH // 4, FONT_SIZE))\n    screen.blit(right_score_text, (3 * SCREEN_WIDTH // 4, FONT_SIZE))\n    pygame.display.flip()\n\ndef move_paddles(keys):\n    if keys[pygame.K_w] and left_paddle_pos[1] > 0:\n        left_paddle_pos[1] -= PADDLE_SPEED\n    if keys[pygame.K_s] and left_paddle_pos[1] < SCREEN_HEIGHT - PADDLE_HEIGHT:\n        left_paddle_pos[1] += PADDLE_SPEED\n    if keys[pygame.K_UP] and right_paddle_pos[1] > 0:\n        right_paddle_pos[1] -= PADDLE_SPEED\n    if keys[pygame.K_DOWN] and right_paddle_pos[1] < SCREEN_HEIGHT - PADDLE_HEIGHT:\n        right_paddle_pos[1] += PADDLE_SPEED\n\ndef move_ball():\n    global ball_speed_x, ball_speed_y, left_score, right_score, running\n    ball_pos[0] += ball_speed_x\n    ball_pos[1] += ball_speed_y\n\n    if ball_pos[1] <= 0 or ball_pos[1] >= SCREEN_HEIGHT - BALL_SIZE:\n        ball_speed_y *= -1\n\n    if ball_pos[0] <= PADDLE_WIDTH and left_paddle_pos[1] < ball_pos[1] < left_paddle_pos[1] + PADDLE_HEIGHT:\n        ball_speed_x *= -1\n        ball_speed_x += BALL_SPEED_INCREMENT if ball_speed_x > 0 else -BALL_SPEED_INCREMENT\n        ball_speed_y += BALL_SPEED_INCREMENT if ball_speed_y > 0 else -BALL_SPEED_INCREMENT\n    elif ball_pos[0] >= SCREEN_WIDTH - 2 * PADDLE_WIDTH and right_paddle_pos[1] < ball_pos[1] < right_paddle_pos[1] + PADDLE_HEIGHT:\n        ball_speed_x *= -1\n        ball_speed_x += BALL_SPEED_INCREMENT if ball_speed_x > 0 else -BALL_SPEED_INCREMENT\n        ball_speed_y += BALL_SPEED_INCREMENT if ball_speed_y > 0 else -BALL_SPEED_INCREMENT\n    elif ball_pos[0] < 0:\n        right_score += 1\n        reset_ball()\n    elif ball_pos[0] > SCREEN_WIDTH:\n        left_score += 1\n        reset_ball()\n\n    if left_score >= WINNING_SCORE or right_score >= WINNING_SCORE:\n        running = False\n\ndef display_winner():\n    winner_text = font.render(f'Player {\"Left\" if left_score > right_score else \"Right\"} wins!', True, WHITE)\n    winner_rect = winner_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))\n    screen.blit(winner_text, winner_rect)\n    pygame.display.flip()\n    pygame.time.wait(3000)\n\ndef main():\n    global paused, running\n\n    draw_startup_screen()\n\n    while running:\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                running = False\n            if event.type == pygame.KEYDOWN:\n                if event.key == pygame.K_SPACE:\n                    paused = not paused\n\n        if not paused:\n            keys = pygame.key.get_pressed()\n            move_paddles(keys)\n            move_ball()\n            draw_game()\n\n        clock.tick(60)\n\n    display_winner()\n    pygame.quit()\n    sys.exit()\n\nif __name__ == '__main__':\n    main()\n```\n<FILE_END>",
    "finalized_code": "<PROJECT_NAME_START>ClassicPongGame<PROJECT_NAME_END>\n\n<FILE_START>\nmain.py\n```python\nimport pygame\nimport random\nimport sys\n\n# Initialize Pygame\npygame.init()\n\n# Constants\nSCREEN_WIDTH = 800\nSCREEN_HEIGHT = 600\nPADDLE_WIDTH = 15\nPADDLE_HEIGHT = 100\nBALL_SIZE = 15\nBALL_SPEED_INCREMENT = 0.5\nPADDLE_SPEED = 10\nFONT_SIZE = 32\nWINNING_SCORE = 5\n\n# Colors\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\n\n# Initialize screen\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption('Pong')\n\n# Initialize clock\nclock = pygame.time.Clock()\n\n# Initialize font\nfont = pygame.font.Font(None, FONT_SIZE)\n\n# Game states\nrunning = True\npaused = False\n\n# Game variables\nleft_score = 0\nright_score = 0\nball_speed_x = BALL_SPEED_INCREMENT * random.choice((1, -1))\nball_speed_y = BALL_SPEED_INCREMENT * random.choice((1, -1))\nball_pos = [SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2]\nleft_paddle_pos = [0, SCREEN_HEIGHT // 2 - PADDLE_HEIGHT // 2]\nright_paddle_pos = [SCREEN_WIDTH - PADDLE_WIDTH, SCREEN_HEIGHT // 2 - PADDLE_HEIGHT // 2]\n\ndef reset_ball():\n    global ball_pos, ball_speed_x, ball_speed_y\n    ball_pos = [SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2]\n    ball_speed_x = BALL_SPEED_INCREMENT * random.choice((1, -1))\n    ball_speed_y = BALL_SPEED_INCREMENT * random.choice((1, -1))\n\ndef draw_startup_screen():\n    screen.fill(BLACK)\n    title_text = font.render('Pong', True, WHITE)\n    title_rect = title_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))\n    screen.blit(title_text, title_rect)\n    pygame.display.flip()\n    pygame.time.wait(2000)\n\ndef draw_game():\n    screen.fill(BLACK)\n    pygame.draw.rect(screen, WHITE, (*left_paddle_pos, PADDLE_WIDTH, PADDLE_HEIGHT))\n    pygame.draw.rect(screen, WHITE, (*right_paddle_pos, PADDLE_WIDTH, PADDLE_HEIGHT))\n    pygame.draw.ellipse(screen, WHITE, (*ball_pos, BALL_SIZE, BALL_SIZE))\n    left_score_text = font.render(str(left_score), True, WHITE)\n    right_score_text = font.render(str(right_score), True, WHITE)\n    screen.blit(left_score_text, (SCREEN_WIDTH // 4, FONT_SIZE))\n    screen.blit(right_score_text, (3 * SCREEN_WIDTH // 4, FONT_SIZE))\n    pygame.display.flip()\n\ndef move_paddles(keys):\n    if keys[pygame.K_w] and left_paddle_pos[1] > 0:\n        left_paddle_pos[1] -= PADDLE_SPEED\n    if keys[pygame.K_s] and left_paddle_pos[1] < SCREEN_HEIGHT - PADDLE_HEIGHT:\n        left_paddle_pos[1] += PADDLE_SPEED\n    if keys[pygame.K_UP] and right_paddle_pos[1] > 0:\n        right_paddle_pos[1] -= PADDLE_SPEED\n    if keys[pygame.K_DOWN] and right_paddle_pos[1] < SCREEN_HEIGHT - PADDLE_HEIGHT:\n        right_paddle_pos[1] += PADDLE_SPEED\n\ndef move_ball():\n    global ball_speed_x, ball_speed_y, left_score, right_score, running\n    ball_pos[0] += ball_speed_x\n    ball_pos[1] += ball_speed_y\n\n    if ball_pos[1] <= 0 or ball_pos[1] >= SCREEN_HEIGHT - BALL_SIZE:\n        ball_speed_y *= -1\n\n    if ball_pos[0] <= PADDLE_WIDTH and left_paddle_pos[1] < ball_pos[1] < left_paddle_pos[1] + PADDLE_HEIGHT:\n        ball_speed_x *= -1\n        ball_speed_x += BALL_SPEED_INCREMENT if ball_speed_x > 0 else -BALL_SPEED_INCREMENT\n        ball_speed_y += BALL_SPEED_INCREMENT if ball_speed_y > 0 else -BALL_SPEED_INCREMENT\n    elif ball_pos[0] >= SCREEN_WIDTH - PADDLE_WIDTH and right_paddle_pos[1] < ball_pos[1] < right_paddle_pos[1] + PADDLE_HEIGHT:\n        ball_speed_x *= -1\n        ball_speed_x += BALL_SPEED_INCREMENT if ball_speed_x > 0 else -BALL_SPEED_INCREMENT\n        ball_speed_y += BALL_SPEED_INCREMENT if ball_speed_y > 0 else -BALL_SPEED_INCREMENT\n    elif ball_pos[0] < 0:\n        right_score += 1\n        reset_ball()\n    elif ball_pos[0] > SCREEN_WIDTH:\n        left_score += 1\n        reset_ball()\n\n    if left_score >= WINNING_SCORE or right_score >= WINNING_SCORE:\n        running = False\n\ndef display_winner():\n    winner_text = font.render(f'Player {\"Left\" if left_score > right_score else \"Right\"} wins!', True, WHITE)\n    winner_rect = winner_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))\n    screen.blit(winner_text, winner_rect)\n    pygame.display.flip()\n    pygame.time.wait(3000)\n\ndef main():\n    global paused, running\n\n    draw_startup_screen()\n\n    while running:\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                running = False\n            if event.type == pygame.KEYDOWN:\n                if event.key == pygame.K_SPACE:\n                    paused = not paused\n\n        if not paused:\n            keys = pygame.key.get_pressed()\n            move_paddles(keys)\n            move_ball()\n            draw_game()\n\n        clock.tick(60)\n\n    display_winner()\n    pygame.quit()\n    sys.exit()\n\nif __name__ == '__main__':\n    main()\n```\n<FILE_END>"
}