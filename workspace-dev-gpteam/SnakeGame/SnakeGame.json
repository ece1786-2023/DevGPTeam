{
    "refine_requirements": "\n# Classic Arcade-Style Snake Game\n```\n1. The game initializes with the snake centrally positioned in the play area, starting with a length of one segment.\n2. The snake grows by one segment for each item consumed, with no maximum length limit.\n3. The player must avoid collisions with the game area walls and the snake's own body while consuming items to increase length and score.\n4. Player movement is controlled exclusively through keyboard arrow keys.\n5. Scoring is based on the number of items consumed, with each item contributing a fixed score increment.\n6. The game ends upon collision with the wall or the snake's own body. A game over screen displays the final score and presents an option to restart the game.\n7. No additional interaction mechanics beyond item consumption and collision avoidance.\n8. The snake's speed remains constant throughout the game, with no difficulty progression.\n```\n",
    "developed_code": "<PROJECT_NAME_START>SnakeGame<PROJECT_NAME_END>\n\n<FILE_START>\nmain.py\n```python\nimport pygame\nimport random\nimport sys\n\n# Initialize pygame\npygame.init()\n\n# Define constants\nSCREEN_WIDTH = 640\nSCREEN_HEIGHT = 480\nSNAKE_SIZE = 20\nITEM_SIZE = 20\nSNAKE_SPEED = 15\n\n# Define colors\nWHITE = (255, 255, 255)\nGREEN = (0, 255, 0)\nRED = (255, 0, 0)\n\n# Set up the display\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption('Snake Game')\n\n# Clock to control the frame rate\nclock = pygame.time.Clock()\n\n# Snake class\nclass Snake:\n    def __init__(self):\n        self.length = 1\n        self.positions = [((SCREEN_WIDTH // 2), (SCREEN_HEIGHT // 2))]\n        self.direction = random.choice([pygame.K_UP, pygame.K_DOWN, pygame.K_LEFT, pygame.K_RIGHT])\n        self.color = GREEN\n        self.score = 0\n\n    def get_head_position(self):\n        return self.positions[0]\n\n    def turn(self, point):\n        if self.length > 1 and (point[0] * -1, point[1] * -1) == self.direction:\n            return\n        else:\n            self.direction = point\n\n    def move(self):\n        cur = self.get_head_position()\n        x, y = self.direction\n        new = (((cur[0] + (x * SNAKE_SIZE)) % SCREEN_WIDTH), (cur[1] + (y * SNAKE_SIZE)) % SCREEN_HEIGHT)\n        if len(self.positions) > 2 and new in self.positions[2:]:\n            self.reset()\n        else:\n            self.positions.insert(0, new)\n            if len(self.positions) > self.length:\n                self.positions.pop()\n\n    def reset(self):\n        self.length = 1\n        self.positions = [((SCREEN_WIDTH // 2), (SCREEN_HEIGHT // 2))]\n        self.score = 0\n        self.direction = random.choice([pygame.K_UP, pygame.K_DOWN, pygame.K_LEFT, pygame.K_RIGHT])\n\n    def draw(self, surface):\n        for p in self.positions:\n            r = pygame.Rect((p[0], p[1]), (SNAKE_SIZE, SNAKE_SIZE))\n            pygame.draw.rect(surface, self.color, r)\n            pygame.draw.rect(surface, WHITE, r, 1)\n\n    def handle_keys(self):\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                pygame.quit()\n                sys.exit()\n            elif event.type == pygame.KEYDOWN:\n                if event.key == pygame.K_UP:\n                    self.turn((0, -1))\n                elif event.key == pygame.K_DOWN:\n                    self.turn((0, 1))\n                elif event.key == pygame.K_LEFT:\n                    self.turn((-1, 0))\n                elif event.key == pygame.K_RIGHT:\n                    self.turn((1, 0))\n\n# Item class\nclass Item:\n    def __init__(self):\n        self.position = (0, 0)\n        self.color = RED\n        self.randomize_position()\n\n    def randomize_position(self):\n        self.position = (random.randint(0, (SCREEN_WIDTH - ITEM_SIZE) // SNAKE_SIZE) * SNAKE_SIZE,\n                         random.randint(0, (SCREEN_HEIGHT - ITEM_SIZE) // SNAKE_SIZE) * SNAKE_SIZE)\n\n    def draw(self, surface):\n        r = pygame.Rect((self.position[0], self.position[1]), (ITEM_SIZE, ITEM_SIZE))\n        pygame.draw.rect(surface, self.color, r)\n        pygame.draw.rect(surface, WHITE, r, 1)\n\ndef draw_score(surface, score):\n    font = pygame.font.SysFont(None, 36)\n    text = font.render(f\"Score: {score}\", True, WHITE)\n    surface.blit(text, (5, 5))\n\ndef main():\n    snake = Snake()\n    item = Item()\n\n    while True:\n        screen.fill((0, 0, 0))\n        snake.handle_keys()\n        snake.move()\n        if snake.get_head_position() == item.position:\n            snake.length += 1\n            snake.score += 1\n            item.randomize_position()\n\n        snake.draw(screen)\n        item.draw(screen)\n        draw_score(screen, snake.score)\n        pygame.display.update()\n        clock.tick(SNAKE_SPEED)\n\nif __name__ == \"__main__\":\n    main()\n```\n<FILE_END>",
    "finalized_code": "<PROJECT_NAME_START>SnakeGame<PROJECT_NAME_END>\n\n<FILE_START>\nmain.py\n```python\nimport pygame\nimport random\nimport sys\n\n# Initialize pygame\npygame.init()\n\n# Define constants\nSCREEN_WIDTH = 640\nSCREEN_HEIGHT = 480\nSNAKE_SIZE = 20\nITEM_SIZE = 20\nSNAKE_SPEED = 15\n\n# Define colors\nWHITE = (255, 255, 255)\nGREEN = (0, 255, 0)\nRED = (255, 0, 0)\n\n# Set up the display\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption('Snake Game')\n\n# Clock to control the frame rate\nclock = pygame.time.Clock()\n\n# Snake class\nclass Snake:\n    def __init__(self):\n        self.length = 1\n        self.positions = [((SCREEN_WIDTH // 2), (SCREEN_HEIGHT // 2))]\n        self.direction = random.choice([(0, -1), (0, 1), (-1, 0), (1, 0)])\n        self.color = GREEN\n        self.score = 0\n\n    def get_head_position(self):\n        return self.positions[0]\n\n    def turn(self, point):\n        if self.length > 1 and (point[0] * -1, point[1] * -1) == self.direction:\n            return\n        else:\n            self.direction = point\n\n    def move(self):\n        cur = self.get_head_position()\n        x, y = self.direction\n        new = (((cur[0] + (x * SNAKE_SIZE)) % SCREEN_WIDTH), (cur[1] + (y * SNAKE_SIZE)) % SCREEN_HEIGHT)\n        if len(self.positions) > 2 and new in self.positions[2:]:\n            self.reset()\n        elif new[0] >= SCREEN_WIDTH or new[0] < 0 or new[1] >= SCREEN_HEIGHT or new[1] < 0:\n            self.reset()\n        else:\n            self.positions.insert(0, new)\n            if len(self.positions) > self.length:\n                self.positions.pop()\n\n    def reset(self):\n        self.length = 1\n        self.positions = [((SCREEN_WIDTH // 2), (SCREEN_HEIGHT // 2))]\n        self.score = 0\n        self.direction = random.choice([(0, -1), (0, 1), (-1, 0), (1, 0)])\n\n    def draw(self, surface):\n        for p in self.positions:\n            r = pygame.Rect((p[0], p[1]), (SNAKE_SIZE, SNAKE_SIZE))\n            pygame.draw.rect(surface, self.color, r)\n            pygame.draw.rect(surface, WHITE, r, 1)\n\n    def handle_keys(self):\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                pygame.quit()\n                sys.exit()\n            elif event.type == pygame.KEYDOWN:\n                if event.key == pygame.K_UP and self.direction != (0, 1):\n                    self.turn((0, -1))\n                elif event.key == pygame.K_DOWN and self.direction != (0, -1):\n                    self.turn((0, 1))\n                elif event.key == pygame.K_LEFT and self.direction != (1, 0):\n                    self.turn((-1, 0))\n                elif event.key == pygame.K_RIGHT and self.direction != (-1, 0):\n                    self.turn((1, 0))\n\n# Item class\nclass Item:\n    def __init__(self):\n        self.position = (0, 0)\n        self.color = RED\n        self.randomize_position()\n\n    def randomize_position(self):\n        self.position = (random.randint(0, (SCREEN_WIDTH - ITEM_SIZE) // SNAKE_SIZE) * SNAKE_SIZE,\n                         random.randint(0, (SCREEN_HEIGHT - ITEM_SIZE) // SNAKE_SIZE) * SNAKE_SIZE)\n\n    def draw(self, surface):\n        r = pygame.Rect((self.position[0], self.position[1]), (ITEM_SIZE, ITEM_SIZE))\n        pygame.draw.rect(surface, self.color, r)\n        pygame.draw.rect(surface, WHITE, r, 1)\n\ndef draw_score(surface, score):\n    font = pygame.font.SysFont(None, 36)\n    text = font.render(f\"Score: {score}\", True, WHITE)\n    surface.blit(text, (5, 5))\n\ndef game_over(surface, score):\n    font = pygame.font.SysFont(None, 48)\n    text = font.render(f\"Game Over! Score: {score}\", True, WHITE)\n    text_rect = text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))\n    surface.blit(text, text_rect)\n    pygame.display.flip()\n    pygame.time.wait(5000)\n    main()\n\ndef main():\n    snake = Snake()\n    item = Item()\n\n    while True:\n        screen.fill((0, 0, 0))\n        snake.handle_keys()\n        snake.move()\n        if snake.get_head_position() == item.position:\n            snake.length += 1\n            snake.score += 1\n            item.randomize_position()\n\n        snake.draw(screen)\n        item.draw(screen)\n        draw_score(screen, snake.score)\n        pygame.display.update()\n        clock.tick(SNAKE_SPEED)\n\n        # Check for game over\n        head_x, head_y = snake.get_head_position()\n        if head_x < 0 or head_x >= SCREEN_WIDTH or head_y < 0 or head_y >= SCREEN_HEIGHT:\n            game_over(screen, snake.score)\n            break\n\nif __name__ == \"__main__\":\n    main()\n```\n<FILE_END>"
}